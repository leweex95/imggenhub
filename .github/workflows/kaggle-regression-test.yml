name: Kaggle pipeline regression test

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      enable_gpu:
        description: 'Enable GPU for the kernel (true/false)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      prompt_text:
        description: 'Prompt for image generation'
        required: false
        default: 'highly photorealistic Budapest city scene with greenery and public terraces on the sidewalks and bike lane on the side of the road'
        type: string

permissions:
  contents: read
  actions: none
  checks: write
  id-token: none

jobs:
  kaggle-regression-test:
    runs-on: imggenhub-runner
    steps:
      - name: Ensure Bash is available
        shell: powershell
        run: |
          # Check if bash is available
          try {
            $bashPath = Get-Command bash -ErrorAction Stop
            Write-Host "Bash found at: $($bashPath.Source)"
          } catch {
            Write-Host "Bash not found. Installing Git for Windows (which includes Bash)..."
            # Install Git for Windows using Chocolatey (assumes Chocolatey is installed)
            choco install git -y --params "/GitAndUnixToolsOnPath /WindowsTerminal /NoAutoCrlf"
            # Refresh PATH
            $env:PATH = [System.Environment]::GetEnvironmentVariable("Path", "Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path", "User")
            # Verify installation
            try {
              $bashPath = Get-Command bash -ErrorAction Stop
              Write-Host "Bash installed successfully at: $($bashPath.Source)"
            } catch {
              Write-Error "Failed to install Bash. Please install Git for Windows manually on the runner."
              exit 1
            }
          }

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          # Install Poetry using pip (more reliable than the installer script)
          python -m pip install poetry==2.2.1
          # Add Poetry to PATH
          $poetryPath = python -c "import sys; print(sys.executable.replace('python.exe', 'Scripts'))"
          $env:PATH = "$poetryPath;$env:PATH"
          # Add to GITHUB_PATH for subsequent steps
          echo "$poetryPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          poetry --version

          # Add Poetry to PATH for all subsequent steps
          "$env:USERPROFILE\AppData\Roaming\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          $env:PATH = "$env:USERPROFILE\AppData\Roaming\Python\Scripts;$env:PATH"

          # Verify Poetry
          poetry --version

      - name: Install Poetry (Ubuntu)
        if: runner.os != 'Windows'
        uses: snok/install-poetry@v1
        with:
          version: 2.2.1

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          Set-Location "$env:GITHUB_WORKSPACE"
          poetry install --no-interaction
          poetry run pip install kaggle

      - name: Install dependencies (Linux)
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          poetry install --no-interaction
          poetry run pip install kaggle

      - name: Setup Kaggle credentials (Windows)
        if: runner.os == 'Windows'
        env:
          PROMPT_TEXT: ${{ github.event.inputs && github.event.inputs.prompt_text || 'highly photorealistic Budapest city scene with greenery and public terraces on the sidewalks and bike lane on the side of the road' }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        shell: powershell
        run: |
          $kaggleDir = "$env:USERPROFILE\.kaggle"
          if (!(Test-Path $kaggleDir)) { New-Item -ItemType Directory -Path $kaggleDir | Out-Null }
          $json = "{""username"":""$env:KAGGLE_USERNAME"",""key"":""$env:KAGGLE_KEY""}"
          Set-Content -Path "$kaggleDir\kaggle.json" -Value $json

      - name: Setup Kaggle credentials (Linux)
        if: runner.os != 'Windows'
        env:
          PROMPT_TEXT: ${{ github.event.inputs && github.event.inputs.prompt_text || 'highly photorealistic Budapest city scene with greenery and public terraces on the sidewalks and bike lane on the side of the road' }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Deploy Kaggle kernel for regression test (deploy only) (Linux)
        if: runner.os != 'Windows'
        env:
          GPU_SETTING: ${{ github.event.inputs && github.event.inputs.enable_gpu || 'false' }}
          PROMPT_TEXT: ${{ github.event.inputs && github.event.inputs.prompt_text || 'highly photorealistic Budapest city scene with greenery and public terraces on the sidewalks and bike lane on the side of the road' }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        run: |
          echo "Deploying regression test kernel with GPU=$GPU_SETTING..."
          cd src/imggenhub/kaggle
          
          python -c "
          import sys
          import os
          from pathlib import Path
          
          # DEBUG: Print all environment variables
          print('=== DEBUG: All Environment Variables ===')
          for key, value in sorted(os.environ.items()):
              if 'KAGGLE' in key or 'PROMPT' in key or 'GPU' in key:
                  print(f'{key}={value}')
          print('=== END DEBUG ===')
          
          sys.path.insert(0, os.path.join('..', '..'))
          from imggenhub.kaggle.core import deploy
          from imggenhub.kaggle.utils.prompts import resolve_prompts
          
          cwd = Path('.')
          prompt_text = os.getenv('PROMPT_TEXT')
          prompts_list = resolve_prompts(None, prompt_text, None)
          gpu_enabled = os.getenv('GPU_SETTING') == 'true'
          kaggle_username = os.getenv('KAGGLE_USERNAME')
          
          print(f'Deploying with GPU={gpu_enabled}')
          print(f'KAGGLE_USERNAME={kaggle_username}')
          
          if not kaggle_username:
              raise NameError('KAGGLE_USERNAME environment variable is not set!')
          
          deploy.run(
              prompts_list=prompts_list,
              notebook=cwd / 'config/kaggle-notebook-image-generation.ipynb',
              kernel_path=cwd / 'config',
              gpu=gpu_enabled
          )
          print(f'Deployment completed. Check progress at https://www.kaggle.com/code/{kaggle_username}/stable-diffusion-batch-generator')
          "

      - name: Deploy Kaggle kernel for regression test (deploy only) (Windows)
        if: runner.os == 'Windows'
        env:
          GPU_SETTING: ${{ github.event.inputs && github.event.inputs.enable_gpu || 'false' }}
          PROMPT_TEXT: ${{ github.event.inputs && github.event.inputs.prompt_text || 'highly photorealistic Budapest city scene with greenery and public terraces on the sidewalks and bike lane on the side of the road' }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        shell: powershell
        run: |
          echo "Deploying regression test kernel with GPU=$env:GPU_SETTING..."
          cd "$env:GITHUB_WORKSPACE\src\imggenhub\kaggle"
          
          $pythonCode = @"
          import sys
          import os
          from pathlib import Path
          
          # DEBUG: Print all environment variables
          print('=== DEBUG: All Environment Variables ===')
          for key, value in sorted(os.environ.items()):
              if 'KAGGLE' in key or 'PROMPT' in key or 'GPU' in key:
                  print(f'{key}={value}')
          print('=== END DEBUG ===')
          
          sys.path.insert(0, os.path.join('..', '..'))
          from imggenhub.kaggle.core import deploy
          from imggenhub.kaggle.utils.prompts import resolve_prompts
          
          cwd = Path('.')
          prompt_text = os.getenv('PROMPT_TEXT')
          prompts_list = resolve_prompts(None, prompt_text, None)
          gpu_enabled = os.getenv('GPU_SETTING') == 'true'
          kaggle_username = os.getenv('KAGGLE_USERNAME')
          
          print(f'Deploying with GPU={gpu_enabled}')
          print(f'KAGGLE_USERNAME={kaggle_username}')
          
          if not kaggle_username:
              raise NameError('KAGGLE_USERNAME environment variable is not set!')
          
          deploy.run(
              prompts_list=prompts_list,
              notebook=cwd / 'config/kaggle-notebook-image-generation.ipynb',
              kernel_path=cwd / 'config',
              gpu=gpu_enabled
          )
          print(f'Deployment completed. Check progress at https://www.kaggle.com/code/{kaggle_username}/stable-diffusion-batch-generator')
          "@
          
          $pythonCode | Out-File -FilePath "deploy_kernel.py" -Encoding UTF8
          python deploy_kernel.py
          Remove-Item "deploy_kernel.py"

      - name: Monitor kernel status (60 seconds) (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "Monitoring kernel for 60 seconds..."
          cd "${GITHUB_WORKSPACE}/src/imggenhub/kaggle" || exit 1

          python - <<'PYCODE'
          import sys, os, time, subprocess, re
          from pathlib import Path

          sys.path.insert(0, os.path.join('..', '..'))
          from imggenhub.kaggle.utils.poll_status import _get_kaggle_command

          KERNEL_ID = 'leventecsibi/stable-diffusion-batch-generator'
          MONITOR_DURATION = 60
          POLL_INTERVAL = 10

          print(f'Starting monitoring for {MONITOR_DURATION} seconds...')
          start_time = time.time()
          kaggle_cmd = _get_kaggle_command()

          while time.time() - start_time < MONITOR_DURATION:
              try:
                  result = subprocess.run(
                      [*kaggle_cmd, 'kernels', 'status', KERNEL_ID],
                      capture_output=True, text=True, check=True
                  )
                  match = re.search(r'has status "(.*)"', result.stdout)
                  status = match.group(1) if match else 'unknown'
                  elapsed = int(time.time() - start_time)
                  print(f'[{elapsed}s] Kernel status: {status}')

                  if status.lower() in ['kernelworkerstatus.complete', 'kernelworkerstatus.error']:
                      print(f'Kernel finished with status: {status}')
                      if status.lower() == 'kernelworkerstatus.error':
                          print('ERROR: Kernel failed - this indicates a regression!')
                          sys.exit(1)
                      break

                  if status.lower() in ['kernelworkerstatus.running', 'kernelworkerstatus.queued']:
                      remaining = MONITOR_DURATION - elapsed
                      if remaining > 0:
                          time.sleep(min(POLL_INTERVAL, remaining))
                      else:
                          print(f'Monitoring period completed. Kernel is still {status}')
                          break
                  else:
                      time.sleep(POLL_INTERVAL)

              except subprocess.CalledProcessError as e:
                  print(f'Error checking status: {e.stderr}')
                  time.sleep(POLL_INTERVAL)
              except Exception as e:
                  print(f'Unexpected error: {e}')
                  time.sleep(POLL_INTERVAL)

          print('Monitoring completed.')
          PYCODE

      - name: Monitor kernel status (60 seconds) (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          echo "Monitoring kernel for 60 seconds..."
          cd "$env:GITHUB_WORKSPACE\src\imggenhub\kaggle"

          $pythonCode = @"
          import sys, os, time, subprocess, re
          from pathlib import Path

          sys.path.insert(0, os.path.join('..', '..'))
          from imggenhub.kaggle.utils.poll_status import _get_kaggle_command

          KERNEL_ID = 'leventecsibi/stable-diffusion-batch-generator'
          MONITOR_DURATION = 60
          POLL_INTERVAL = 10

          print(f'Starting monitoring for {MONITOR_DURATION} seconds...')
          start_time = time.time()
          kaggle_cmd = _get_kaggle_command()

          while time.time() - start_time < MONITOR_DURATION:
              try:
                  result = subprocess.run(
                      [*kaggle_cmd, 'kernels', 'status', KERNEL_ID],
                      capture_output=True, text=True, check=True
                  )
                  match = re.search(r'has status "(.*)"', result.stdout)
                  status = match.group(1) if match else 'unknown'
                  elapsed = int(time.time() - start_time)
                  print(f'[{elapsed}s] Kernel status: {status}')

                  if status.lower() in ['kernelworkerstatus.complete', 'kernelworkerstatus.error']:
                      print(f'Kernel finished with status: {status}')
                      if status.lower() == 'kernelworkerstatus.error':
                          print('ERROR: Kernel failed - this indicates a regression!')
                          sys.exit(1)
                      break

                  if status.lower() in ['kernelworkerstatus.running', 'kernelworkerstatus.queued']:
                      remaining = MONITOR_DURATION - elapsed
                      if remaining > 0:
                          time.sleep(min(POLL_INTERVAL, remaining))
                      else:
                          print(f'Monitoring period completed. Kernel is still {status}')
                          break
                  else:
                      time.sleep(POLL_INTERVAL)

              except subprocess.CalledProcessError as e:
                  print(f'Error checking status: {e.stderr}')
                  time.sleep(POLL_INTERVAL)
              except Exception as e:
                  print(f'Unexpected error: {e}')
                  time.sleep(POLL_INTERVAL)

          print('Monitoring completed.')
          "@

          $pythonCode | Out-File -FilePath "monitor_kernel.py" -Encoding UTF8
          python monitor_kernel.py
          Remove-Item "monitor_kernel.py"

      - name: Regression test summary
        if: always()
        run: |
          echo "=== Kaggle Regression Test Summary ==="
          echo "✅ Kernel deployment: SUCCESS"
          echo "✅ Status monitoring: SUCCESS"
          echo ""
          echo "The regression test validates that:"
          echo "1. Kaggle kernel can be deployed successfully"
          echo "2. Kernel status can be monitored via CLI"
          echo "3. No immediate deployment or configuration regressions"
          echo ""
          echo "Note: This test doesn't run the full image generation pipeline"
          echo "to avoid consuming GPU quota and time. It only validates the"
          echo "deployment and monitoring infrastructure."
          echo ""
          echo "The deployed kernel will continue running and complete naturally."
          echo ""
          echo "Check the output image at https://www.kaggle.com/code/${{ secrets.KAGGLE_USERNAME }}/stable-diffusion-batch-generator/output"

  notify:
    needs: kaggle-regression-test
    if: always() && needs.kaggle-regression-test.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Send failure email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 [ImgGenHub Github Project] Daily Kaggle Regression Test Failed"
          html_body: |
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:22px; font-weight:bold; color:red;">
              🚨 Daily Kaggle Regression Test Failed!
            </p>
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:18px;">
              The Kaggle deployment regression test has failed. This could indicate issues with:
            </p>
            <ul style="font-family: 'Roboto', Helvetica, sans-serif; font-size:16px;">
              <li>Kaggle API authentication</li>
              <li>Kernel deployment process</li>
              <li>Notebook configuration</li>
              <li>Status monitoring functionality</li>
            </ul>
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:18px;">
              Check logs: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">
              Workflow Run</a>
            </p>
          to: ${{ secrets.EMAIL_USERNAME }}
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>