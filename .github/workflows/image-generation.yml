name: Image generation

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Single prompt for image generation'
        required: true
        default: 'City scene in Budapest with plenty of greenery, micromobility, public terraces, full of life. Highly photorealistic.'
        type: string
      platform:
        description: 'Platform to use for image generation'
        required: false
        default: 'kaggle'
        type: choice
        options:
        - 'kaggle'
      model_name:
        description: 'Hugging Face model to use for generation'
        required: false
        default: 'stabilityai/stable-diffusion-xl-base-1.0'
        type: choice
        options:
        - 'stabilityai/stable-diffusion-xl-base-1.0'
        - 'runwayml/stable-diffusion-v1-5'
        - 'stabilityai/stable-diffusion-2-1'
        - 'CompVis/stable-diffusion-v1-4'
      enable_gpu:
        description: 'Enable GPU for faster generation'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'
      dest_folder:
        description: 'Destination folder for generated images'
        required: false
        default: 'output_images'
        type: string

permissions:
  contents: read
  actions: none
  checks: write
  id-token: none

jobs:
  generate-images:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, imggenhub-runner]
    permissions:
      contents: write  # Allow pushing to repository
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"
          # Download installer
          Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing -OutFile install-poetry.py
          py install-poetry.py --version 1.8.2

          # Add Poetry to PATH for this session
          $env:PATH = "$env:USERPROFILE\AppData\Roaming\Python\Scripts;$env:PATH"

          # Verify Poetry
          poetry --version

      - name: Install Poetry (Ubuntu)
        if: runner.os != 'Windows'
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2

      - name: Install dependencies
        run: |
          poetry install --no-interaction
          poetry run pip install kaggle

      - name: Setup Kaggle credentials (Linux)
        if: runner.os != 'Windows'
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          mkdir -p ~/.kaggle
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Setup Kaggle credentials (Windows)
        if: runner.os == 'Windows'
        env:
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        shell: powershell
        run: |
          $kaggleDir = "$env:USERPROFILE\.kaggle"
          if (!(Test-Path $kaggleDir)) { New-Item -ItemType Directory -Path $kaggleDir | Out-Null }
          $json = "{""username"":""$env:KAGGLE_USERNAME"",""key"":""$env:KAGGLE_KEY""}"
          Set-Content -Path "$kaggleDir\kaggle.json" -Value $json

      - name: Generate images via Kaggle pipeline
        env:
          PROMPT: ${{ github.event.inputs.prompt }}
          MODEL_NAME: ${{ github.event.inputs.model_name }}
          GPU_SETTING: ${{ github.event.inputs.enable_gpu }}
          DEST_FOLDER: ${{ github.event.inputs.dest_folder }}
        run: |
          echo "Starting image generation with:"
          echo "Prompt: $PROMPT"
          echo "Model: $MODEL_NAME"
          echo "GPU: $GPU_SETTING"
          echo "Destination: $DEST_FOLDER"
          echo ""
          
          cd src/imggenhub/kaggle
          
          # Build the command with proper arguments
          ARGS="--prompt \"$PROMPT\" --dest ../../../$DEST_FOLDER"
          
          if [ "$MODEL_NAME" != "stabilityai/stable-diffusion-xl-base-1.0" ]; then
            ARGS="$ARGS --model_name \"$MODEL_NAME\""
          fi
          
          if [ "$GPU_SETTING" = "true" ]; then
            ARGS="$ARGS --gpu"
          fi
          
          echo "Running: python -m imggenhub.kaggle.main $ARGS"
          echo ""
          
          # Run the full pipeline (deploy -> poll -> download)
          python -c "
          import sys
          import os
          from pathlib import Path
          sys.path.insert(0, os.path.join('..', '..'))
          from imggenhub.kaggle.main import run_pipeline
          
          # Convert shell variables to proper Python types
          gpu_enabled = os.getenv('GPU_SETTING', 'false').lower() == 'true'
          model_name = os.getenv('MODEL_NAME')
          if model_name == 'stabilityai/stable-diffusion-xl-base-1.0':
              model_name = None
          
          run_pipeline(
              prompts_file=None,
              notebook='config/kaggle-notebook-image-generation.ipynb',
              kernel_path='config',
              gpu=gpu_enabled,
              dest='../../../' + os.getenv('DEST_FOLDER', 'output_images'),
              model_name=model_name,
              prompt=os.getenv('PROMPT'),
              prompts=None
          )
          "

      - name: Verify generated images
        env:
          DEST_FOLDER: ${{ github.event.inputs.dest_folder }}
        run: |
          echo "Generated images summary:"
          if [ -d "$DEST_FOLDER" ]; then
            IMAGE_COUNT=$(find "$DEST_FOLDER" -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" \) | wc -l)
            echo "Found $IMAGE_COUNT image(s) in $DEST_FOLDER/"
            
            echo ""
            echo "📁 Files generated:"
            find "$DEST_FOLDER" -type f -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | head -10
            
            # Show total size
            TOTAL_SIZE=$(du -sh "$DEST_FOLDER" | cut -f1)
            echo ""
            echo "💾 Total size: $TOTAL_SIZE"
          else
            echo "No output directory found!"
            exit 1
          fi

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Commit and push generated images
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          DEST_FOLDER: ${{ github.event.inputs.dest_folder }}
          PROMPT: ${{ github.event.inputs.prompt }}
          MODEL_NAME: ${{ github.event.inputs.model_name }}
          GPU_SETTING: ${{ github.event.inputs.enable_gpu }}
        run: |
          # Check if there are any images to commit first
          if [ ! -d "$DEST_FOLDER" ] || [ -z "$(find "$DEST_FOLDER" -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" 2>/dev/null)" ]; then
            echo "No images found to commit"
            exit 0
          fi
        
          # Always sync with remote first
          git fetch origin master
          git reset --hard origin/master

          # Add generated images to git
          git add "$DEST_FOLDER"
          if git diff --staged --quiet; then
            echo "No new changes to commit"
            exit 0
          fi
          
          COMMIT_MSG="[Auto-commit] Added generated images [skip ci]

          Prompt: $PROMPT
          Model: $MODEL_NAME
          GPU: $GPU_SETTING
          Destination: $DEST_FOLDER
          
          Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"
          
          # Commit once
          git commit -m "$COMMIT_MSG"

          # Push with retries
          RETRIES=5
          for i in $(seq 1 $RETRIES); do
            if git push https://x-access-token:$PAT_TOKEN@github.com/${{ github.repository }} HEAD:master; then
              echo "Successfully pushed changes."
              exit 0
            else
              echo "Push failed on attempt $i/$RETRIES, retrying..."
              sleep 2
            fi
          done

          echo "Failed to push after $RETRIES attempts."
          exit 1

  notify-completion:
    needs: generate-images
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Send completion email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🎨 [ImgGenHub] Image Generation ${{ needs.generate-images.result == 'success' && 'Completed' || 'Failed' }}"
          html_body: |
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:22px; font-weight:bold; color:${{ needs.generate-images.result == 'success' && 'green' || 'red' }};">
              🎨 Image Generation ${{ needs.generate-images.result == 'success' && 'Completed Successfully!' || 'Failed!' }}
            </p>
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:18px;">
              <strong>Generation Details:</strong>
            </p>
            <ul style="font-family: 'Roboto', Helvetica, sans-serif; font-size:16px;">
              <li><strong>Prompt:</strong> ${{ github.event.inputs.prompt }}</li>
              <li><strong>Model:</strong> ${{ github.event.inputs.model_name }}</li>
              <li><strong>GPU:</strong> ${{ github.event.inputs.enable_gpu }}</li>
              <li><strong>Destination:</strong> ${{ github.event.inputs.dest_folder }}</li>
            </ul>
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:18px;">
              ${{ needs.generate-images.result == 'success' && 'Generated images have been automatically committed to the repository.' || 'Check the workflow logs for error details.' }}
            </p>
            <p style="font-family: 'Roboto', Helvetica, sans-serif; font-size:18px;">
              View workflow: <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">
              Workflow Run</a>
            </p>
          to: ${{ secrets.EMAIL_USERNAME }}
          from: ImgGenHub <${{ secrets.EMAIL_USERNAME }}>